"use strict"

// Node Modules
;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _del = require("del");

var _del2 = _interopRequireDefault(_del);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// noinspection JSUnusedLocalSymbols
/**
 * @name GConfig
 * @author 'Anthony Trimble red2678@gmail.com'
 * @since '11/14/2015'
 *
 * @class GConfig
 * @classdesc Creates a new GConfig.
 *
 * @exports GConfig
 * @requires  module:npath
 * @requires  module:del
 *
 * @example const mainConfig = new GConfig({
 *     showDeleted : false,
 *     liveReload : true
 *   });
 */
class GConfig {

  /**
   * Creates a GConfig object
   * @param {Object} [config={}] - Options to initialize the component with
   * @param {!string} [config.bowerFolder="./bower_components/"] - See {@link bowerDir}
   * @param {!string} [config.buildDir="./_BUILDS/dev/mainSite/"] - See {@link buildDir}
   * @param {!string} [config.docs="./_DOCS/"] - See {@link docs}
   * @param {!string} [config.env="dev"] - See {@link env}
   * @param {!string} [config.latestDir="./_LATEST/"] - See {@link latestDir}
   * @param {!boolean} [config.liveReload="true"] - See {@link liveReload}
   * @param {!string} [config.nodeModulesFolder="./node_modules/"] - See {@link nodeModulesFolder}
   * @param {!boolean} [config.produceArtifacts="false"] - See {@link produceArtifacts}
   * @param {!string} [config.rootDir='./'] - See {@link rootDir}
   * @param {!object} [config.serverOptionsConfig="{}"] - See {@link serverOptionsConfig}
   * @param {!boolean} [config.showDeleted="false"] - See {@link showDeleted}
   * @param {!string} [config.site="mainSite"] - See {@link site}
   * @param {!object} [config.sources="{}"] - See {@link sources}
   * @param {!string} [config.srcDir="./_SRC/dev/"] - See {@link srcDir}
   */
  constructor() {
    let config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    /**
     * Default value :: './'<br>
     * The project root directory
     * @type {object}
     * @example './'
     */
    this.root = (config.root || '.') + _path2.default.sep;

    /**
     * Default value :: 'dev'<br>
     * The project environment from the NODE_ENV environmental variable.
     * @type {string}
     * @example 'dev'
     */
    this.env = config.env || process.env.NODE_ENV ? (config.env || process.env.NODE_ENV || 'dev').toLowerCase() : '';

    /**
     * Default value :: 'mainSite'<br>
     * The project site from env.TAGGLISH_SITE
     * @type {string}
     * @example 'mainSite'
     */
    this.srcSubFolder = config.srcSubFolder || process.env.GCONFIG_SRCSUB ? config.srcSubFolder || process.env.GCONFIG_SRCSUB.toLowerCase() + _path2.default.sep : '';

    /**
     * Default value :: './builds/dev/mainSite/'<br>
     * The project builds directory
     * @type {string}
     * @example './builds/dev/mainSite/'
     */
    this.builds = this.root + (config.builds || 'builds') + _path2.default.sep + (this.env ? this.env + _path2.default.sep : '') + this.srcSubFolder;

    /**
     * Default value :: './_SRC/'<br>
     *  The project source directory
     * @type {string}
     * @example './_SRC/'
     */
    this.src = this.root + (config.src || 'src') + _path2.default.sep + this.srcSubFolder;

    /**
     * Default value :: './docs/'<br>
     * The project docs directory
     * @type {string}
     * @example './_DOCS/'
     */
    this.docs = this.root + (config.docs || 'docs') + _path2.default.sep;

    /**
     * Default value :: './bower_components/'<br>
     * The project bower directory
     * @type {string}
     * @example './bower_components/'
     */
    this.bower = this.root + (config.bower || 'bower_components') + _path2.default.sep;

    /**
     * Default value :: './node_modules/'<br>
     * The project node modules directory
     * @type {string}
     * @example './node_modules/'
     */
    this.nodeModules = this.root + (config.nodeModules || 'node_modules') + _path2.default.sep;

    /**
     * Default value :: true<br>
     * Whether or not to use gulp live reload
     * @type {boolean}
     * @example true
     */
    this.liveReload = config.liveReload || true;

    /**
     * Default value :: false<br>
     * Whether or not to use produce build artifacts
     * @type {boolean}
     * @example false
     */
    this.produceArtifacts = config.produceArtifacts || false;

    /**
     * Default value :: see example. If overriding all fields are required.<br>
     * Container for gulp-connect server options
     * @type {object}
     * @example
     * {
    *    root :'./builds/v1/dev/',
    *    livereload : true,
    *    port : 64033
    * }
     */
    this.serverOptions = config.serverOptions || {
      root: this.builds + this.srcSubFolder + (this.env ? this.env + _path2.default.sep : ''),
      livereload: this.liveReload,
      port: 64033
    };

    /**
     * Default value :: false<br>
     * Whether or not to show deleted gulp files in the console
     * @type {boolean}
     * @example false
     */
    this.showDeleted = config.showDeleted || false;

    /**
     * Default value :: {}<br>
     * Container for source paths
     * @type {object}
     * @example '{}'
     */
    this.sources = config.sources || {};
  }

  /**
   * Capitalizes the first letter of a passed in string
   * @param {string} str='' - The string to capitalize
   * @returns {string} - The string to with the first letter capitalized
   * @example const str = capitalize('my test string');
   * str === 'My test string';
   */
  capitalize() {
    let str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  }

  /**
   * Wraps node del.sync in {@link logDeleted}
   * @param {Array<string>} files=[] - The files to be delted, accepts GLOB patterns.
   * @returns {void}
   * @example const config = new GConfig();
   * config.deleteFiles(['folder/file.html', 'folder/file.css', 'folder/folder-two/*.js']) //synchronous action
   */
  deleteFiles() {
    let files = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    this.logDeleted_(_del2.default.sync(files));
  }

  /**
   * Basic getter
   * @param {string} property - the property to get
   * @returns {*} - found property or undefined
   * @example const config = new GConfig();
   * const style = config.get('someProperty');
   */
  get() {
    let property = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    return this[property];
  }

  /**
   *
   * @param paths
   * @param location
   */
  logDeleted_(paths) {
    let location = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

    if (this.showDeleted) {
      console.log('\n******************************* *************\n' + (location ? this.capitalize(location) : '') + 'Deleted files/folders: [\n' + paths.join(',\n') + '\n]\n*******************************************');
    }
  }

  /**
   * Returns a path comprised of the base path to the Bower directory and the passed in supplemental path.
   * @param {string} dir='' - The supplemental path
   * @param supplementalPath
   * @returns {string} - The generated path
   * @example const config = new GConfig();
   * const jqueryPath = config.getBowerDir('jquery/dist/jquery.min.js');
   * jqueryPath === './bower_folder/jquery/dist/jquery.min.js';
   */
  path() {
    let dir = arguments.length <= 0 || arguments[0] === undefined ? '.' : arguments[0];
    let supplementalPath = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

    return this[dir] + supplementalPath;
  }

  /**
   * Get current SASS style based on environment ({@link env}). If "production" or "ppe" style is compressed, all
   * other cases style is expanded.
   * @returns {string} 'compressed' || 'expanded'
   * @example const config = new GConfig();
   * const sassStyle = config.sassStyle();
   * sassStyle === 'expanded'
   */
  sassStyle() {
    return this.env === 'production' || this.env === 'ppe' ? 'compressed' : 'expanded';
  }

  /**
   * Class setter, returns instance to allow chaining
   * @param {string} property - The proeprty to set
   * @param {*} value - The value to assign to the property
   * @returns {GConfig} - Returns the object instance
   * @example const config = new GConfig();
   * const value = config.set('someProperty', true).get('someProperty');
   * value === true;
   */
  set(property, value) {
    this[property] = value;
    return this;
  }
}
exports.default = GConfig;
//# sourceMappingURL=data:application/json;base64,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QUssR0FBRyxZQUFZLEdBQUcsVUFBVSxDQUFFO0dBQ3ZGOzs7Ozs7Ozs7OztBQUFBLEFBV0QsS0FBRyxDQUFDLFFBQWUsRUFBRSxLQUFTLEVBQVU7QUFDdEMsUUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUN2QixXQUFPLElBQUksQ0FBQztHQUNiO0NBQ0Y7a0JBalBvQixPQUFPIiwiZmlsZSI6IkdDb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIE5vZGUgTW9kdWxlc1xuaW1wb3J0IG5QYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgZGVsIGZyb20gXCJkZWxcIjtcblxuLy8gbm9pbnNwZWN0aW9uIEpTVW51c2VkTG9jYWxTeW1ib2xzXG4vKipcbiAqIEBuYW1lIEdDb25maWdcbiAqIEBhdXRob3IgJ0FudGhvbnkgVHJpbWJsZSByZWQyNjc4QGdtYWlsLmNvbSdcbiAqIEBzaW5jZSAnMTEvMTQvMjAxNSdcbiAqXG4gKiBAY2xhc3MgR0NvbmZpZ1xuICogQGNsYXNzZGVzYyBDcmVhdGVzIGEgbmV3IEdDb25maWcuXG4gKlxuICogQGV4cG9ydHMgR0NvbmZpZ1xuICogQHJlcXVpcmVzICBtb2R1bGU6bnBhdGhcbiAqIEByZXF1aXJlcyAgbW9kdWxlOmRlbFxuICpcbiAqIEBleGFtcGxlIGNvbnN0IG1haW5Db25maWcgPSBuZXcgR0NvbmZpZyh7XG4gKiAgICAgc2hvd0RlbGV0ZWQgOiBmYWxzZSxcbiAqICAgICBsaXZlUmVsb2FkIDogdHJ1ZVxuICogICB9KTtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0NvbmZpZyB7XG5cbiAgZW52OnN0cmluZztcbiAgc2l0ZTpzdHJpbmc7XG5cbiAgcm9vdDpzdHJpbmc7XG4gIHNyY0RpcjpzdHJpbmc7XG4gIGJ1aWxkRGlyOnN0cmluZztcbiAgbGF0ZXN0RGlyOnN0cmluZztcbiAgYm93ZXJEaXI6c3RyaW5nO1xuICBub2RlTW9kdWxlc0ZvbGRlcjpzdHJpbmc7XG4gIGRvY3NEaXI6c3RyaW5nO1xuXG4gIHNob3dEZWxldGVkOmJvb2xlYW47XG4gIGxpdmVSZWxvYWQ6Ym9vbGVhbjtcbiAgcHJvZHVjZUFydGlmYWN0czpib29sZWFuO1xuXG4gIHNvdXJjZXM6b2JqZWN0O1xuICBzZXJ2ZXJPcHRpb25zQ29uZmlnOm9iamVjdDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIEdDb25maWcgb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnPXt9XSAtIE9wdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IHdpdGhcbiAgICogQHBhcmFtIHshc3RyaW5nfSBbY29uZmlnLmJvd2VyRm9sZGVyPVwiLi9ib3dlcl9jb21wb25lbnRzL1wiXSAtIFNlZSB7QGxpbmsgYm93ZXJEaXJ9XG4gICAqIEBwYXJhbSB7IXN0cmluZ30gW2NvbmZpZy5idWlsZERpcj1cIi4vX0JVSUxEUy9kZXYvbWFpblNpdGUvXCJdIC0gU2VlIHtAbGluayBidWlsZERpcn1cbiAgICogQHBhcmFtIHshc3RyaW5nfSBbY29uZmlnLmRvY3M9XCIuL19ET0NTL1wiXSAtIFNlZSB7QGxpbmsgZG9jc31cbiAgICogQHBhcmFtIHshc3RyaW5nfSBbY29uZmlnLmVudj1cImRldlwiXSAtIFNlZSB7QGxpbmsgZW52fVxuICAgKiBAcGFyYW0geyFzdHJpbmd9IFtjb25maWcubGF0ZXN0RGlyPVwiLi9fTEFURVNUL1wiXSAtIFNlZSB7QGxpbmsgbGF0ZXN0RGlyfVxuICAgKiBAcGFyYW0geyFib29sZWFufSBbY29uZmlnLmxpdmVSZWxvYWQ9XCJ0cnVlXCJdIC0gU2VlIHtAbGluayBsaXZlUmVsb2FkfVxuICAgKiBAcGFyYW0geyFzdHJpbmd9IFtjb25maWcubm9kZU1vZHVsZXNGb2xkZXI9XCIuL25vZGVfbW9kdWxlcy9cIl0gLSBTZWUge0BsaW5rIG5vZGVNb2R1bGVzRm9sZGVyfVxuICAgKiBAcGFyYW0geyFib29sZWFufSBbY29uZmlnLnByb2R1Y2VBcnRpZmFjdHM9XCJmYWxzZVwiXSAtIFNlZSB7QGxpbmsgcHJvZHVjZUFydGlmYWN0c31cbiAgICogQHBhcmFtIHshc3RyaW5nfSBbY29uZmlnLnJvb3REaXI9Jy4vJ10gLSBTZWUge0BsaW5rIHJvb3REaXJ9XG4gICAqIEBwYXJhbSB7IW9iamVjdH0gW2NvbmZpZy5zZXJ2ZXJPcHRpb25zQ29uZmlnPVwie31cIl0gLSBTZWUge0BsaW5rIHNlcnZlck9wdGlvbnNDb25maWd9XG4gICAqIEBwYXJhbSB7IWJvb2xlYW59IFtjb25maWcuc2hvd0RlbGV0ZWQ9XCJmYWxzZVwiXSAtIFNlZSB7QGxpbmsgc2hvd0RlbGV0ZWR9XG4gICAqIEBwYXJhbSB7IXN0cmluZ30gW2NvbmZpZy5zaXRlPVwibWFpblNpdGVcIl0gLSBTZWUge0BsaW5rIHNpdGV9XG4gICAqIEBwYXJhbSB7IW9iamVjdH0gW2NvbmZpZy5zb3VyY2VzPVwie31cIl0gLSBTZWUge0BsaW5rIHNvdXJjZXN9XG4gICAqIEBwYXJhbSB7IXN0cmluZ30gW2NvbmZpZy5zcmNEaXI9XCIuL19TUkMvZGV2L1wiXSAtIFNlZSB7QGxpbmsgc3JjRGlyfVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnOm9iamVjdCA9IHt9KTpHQ29uZmlnIHtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgdmFsdWUgOjogJy4vJzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCByb290IGRpcmVjdG9yeVxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQGV4YW1wbGUgJy4vJ1xuICAgICAqL1xuICAgIHRoaXMucm9vdCA9IChjb25maWcucm9vdCB8fCAnLicpICsgblBhdGguc2VwO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiAnZGV2Jzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCBlbnZpcm9ubWVudCBmcm9tIHRoZSBOT0RFX0VOViBlbnZpcm9ubWVudGFsIHZhcmlhYmxlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGV4YW1wbGUgJ2RldidcbiAgICAgKi9cbiAgICB0aGlzLmVudiA9IChjb25maWcuZW52IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WKSA/IChjb25maWcuZW52IHx8IChwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2JykpLnRvTG93ZXJDYXNlKCkgOiAnJztcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgdmFsdWUgOjogJ21haW5TaXRlJzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCBzaXRlIGZyb20gZW52LlRBR0dMSVNIX1NJVEVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBleGFtcGxlICdtYWluU2l0ZSdcbiAgICAgKi9cbiAgICB0aGlzLnNyY1N1YkZvbGRlciA9IChjb25maWcuc3JjU3ViRm9sZGVyIHx8IHByb2Nlc3MuZW52LkdDT05GSUdfU1JDU1VCKSA/IGNvbmZpZy5zcmNTdWJGb2xkZXIgfHwgKHByb2Nlc3MuZW52LkdDT05GSUdfU1JDU1VCKS50b0xvd2VyQ2FzZSgpICsgblBhdGguc2VwIDogJyc7XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHZhbHVlIDo6ICcuL2J1aWxkcy9kZXYvbWFpblNpdGUvJzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCBidWlsZHMgZGlyZWN0b3J5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAZXhhbXBsZSAnLi9idWlsZHMvZGV2L21haW5TaXRlLydcbiAgICAgKi9cbiAgICB0aGlzLmJ1aWxkcyA9IHRoaXMucm9vdCAgKyAoY29uZmlnLmJ1aWxkcyB8fCAnYnVpbGRzJykgKyBuUGF0aC5zZXAgK1xuICAgICAgKCh0aGlzLmVudikgPyB0aGlzLmVudiArIG5QYXRoLnNlcCA6ICcnKSArIHRoaXMuc3JjU3ViRm9sZGVyO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiAnLi9fU1JDLyc8YnI+XG4gICAgICogIFRoZSBwcm9qZWN0IHNvdXJjZSBkaXJlY3RvcnlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBleGFtcGxlICcuL19TUkMvJ1xuICAgICAqL1xuICAgIHRoaXMuc3JjID0gdGhpcy5yb290ICsgKGNvbmZpZy5zcmMgfHwgJ3NyYycpICsgblBhdGguc2VwICsgdGhpcy5zcmNTdWJGb2xkZXI7XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHZhbHVlIDo6ICcuL2RvY3MvJzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCBkb2NzIGRpcmVjdG9yeVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGV4YW1wbGUgJy4vX0RPQ1MvJ1xuICAgICAqL1xuICAgIHRoaXMuZG9jcyA9IHRoaXMucm9vdCArIChjb25maWcuZG9jcyB8fCAnZG9jcycpICsgblBhdGguc2VwO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiAnLi9ib3dlcl9jb21wb25lbnRzLyc8YnI+XG4gICAgICogVGhlIHByb2plY3QgYm93ZXIgZGlyZWN0b3J5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAZXhhbXBsZSAnLi9ib3dlcl9jb21wb25lbnRzLydcbiAgICAgKi9cbiAgICB0aGlzLmJvd2VyID0gdGhpcy5yb290ICsgKGNvbmZpZy5ib3dlciB8fCAnYm93ZXJfY29tcG9uZW50cycpICsgblBhdGguc2VwO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiAnLi9ub2RlX21vZHVsZXMvJzxicj5cbiAgICAgKiBUaGUgcHJvamVjdCBub2RlIG1vZHVsZXMgZGlyZWN0b3J5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAZXhhbXBsZSAnLi9ub2RlX21vZHVsZXMvJ1xuICAgICAqL1xuICAgIHRoaXMubm9kZU1vZHVsZXMgPSB0aGlzLnJvb3QgKyAoY29uZmlnLm5vZGVNb2R1bGVzIHx8ICdub2RlX21vZHVsZXMnKSArIG5QYXRoLnNlcDtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgdmFsdWUgOjogdHJ1ZTxicj5cbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgZ3VscCBsaXZlIHJlbG9hZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBleGFtcGxlIHRydWVcbiAgICAgKi9cbiAgICB0aGlzLmxpdmVSZWxvYWQgPSBjb25maWcubGl2ZVJlbG9hZCB8fCB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiBmYWxzZTxicj5cbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgcHJvZHVjZSBidWlsZCBhcnRpZmFjdHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMucHJvZHVjZUFydGlmYWN0cyA9IGNvbmZpZy5wcm9kdWNlQXJ0aWZhY3RzIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCB2YWx1ZSA6OiBzZWUgZXhhbXBsZS4gSWYgb3ZlcnJpZGluZyBhbGwgZmllbGRzIGFyZSByZXF1aXJlZC48YnI+XG4gICAgICogQ29udGFpbmVyIGZvciBndWxwLWNvbm5lY3Qgc2VydmVyIG9wdGlvbnNcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICoge1xuXHRcdCAqICAgIHJvb3QgOicuL2J1aWxkcy92MS9kZXYvJyxcblx0XHQgKiAgICBsaXZlcmVsb2FkIDogdHJ1ZSxcblx0XHQgKiAgICBwb3J0IDogNjQwMzNcblx0XHQgKiB9XG4gICAgICovXG4gICAgdGhpcy5zZXJ2ZXJPcHRpb25zID0gY29uZmlnLnNlcnZlck9wdGlvbnMgfHwge1xuICAgICAgICByb290OiB0aGlzLmJ1aWxkcyArIHRoaXMuc3JjU3ViRm9sZGVyICsgKCh0aGlzLmVudikgPyB0aGlzLmVudiArIG5QYXRoLnNlcCA6ICcnKSxcbiAgICAgICAgbGl2ZXJlbG9hZDogdGhpcy5saXZlUmVsb2FkLFxuICAgICAgICBwb3J0OiA2NDAzM1xuICAgICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgdmFsdWUgOjogZmFsc2U8YnI+XG4gICAgICogV2hldGhlciBvciBub3QgdG8gc2hvdyBkZWxldGVkIGd1bHAgZmlsZXMgaW4gdGhlIGNvbnNvbGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuc2hvd0RlbGV0ZWQgPSBjb25maWcuc2hvd0RlbGV0ZWQgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHZhbHVlIDo6IHt9PGJyPlxuICAgICAqIENvbnRhaW5lciBmb3Igc291cmNlIHBhdGhzXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAZXhhbXBsZSAne30nXG4gICAgICovXG4gICAgdGhpcy5zb3VyY2VzID0gY29uZmlnLnNvdXJjZXMgfHwge307XG4gIH1cblxuICAvKipcbiAgICogQ2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGxldHRlciBvZiBhIHBhc3NlZCBpbiBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cj0nJyAtIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBzdHJpbmcgdG8gd2l0aCB0aGUgZmlyc3QgbGV0dGVyIGNhcGl0YWxpemVkXG4gICAqIEBleGFtcGxlIGNvbnN0IHN0ciA9IGNhcGl0YWxpemUoJ215IHRlc3Qgc3RyaW5nJyk7XG4gICAqIHN0ciA9PT0gJ015IHRlc3Qgc3RyaW5nJztcbiAgICovXG4gIGNhcGl0YWxpemUoc3RyOnN0cmluZyA9ICcnKTpzdHJpbmcge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyBub2RlIGRlbC5zeW5jIGluIHtAbGluayBsb2dEZWxldGVkfVxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGZpbGVzPVtdIC0gVGhlIGZpbGVzIHRvIGJlIGRlbHRlZCwgYWNjZXB0cyBHTE9CIHBhdHRlcm5zLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICogQGV4YW1wbGUgY29uc3QgY29uZmlnID0gbmV3IEdDb25maWcoKTtcbiAgICogY29uZmlnLmRlbGV0ZUZpbGVzKFsnZm9sZGVyL2ZpbGUuaHRtbCcsICdmb2xkZXIvZmlsZS5jc3MnLCAnZm9sZGVyL2ZvbGRlci10d28vKi5qcyddKSAvL3N5bmNocm9ub3VzIGFjdGlvblxuICAgKi9cbiAgZGVsZXRlRmlsZXMoZmlsZXM6QXJyYXk8c3RyaW5nPiA9IFtdKTp2b2lkIHtcbiAgICB0aGlzLmxvZ0RlbGV0ZWRfKGRlbC5zeW5jKGZpbGVzKSk7XG4gIH1cblxuICAvKipcbiAgICogQmFzaWMgZ2V0dGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSAtIHRoZSBwcm9wZXJ0eSB0byBnZXRcbiAgICogQHJldHVybnMgeyp9IC0gZm91bmQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG4gICAqIEBleGFtcGxlIGNvbnN0IGNvbmZpZyA9IG5ldyBHQ29uZmlnKCk7XG4gICAqIGNvbnN0IHN0eWxlID0gY29uZmlnLmdldCgnc29tZVByb3BlcnR5Jyk7XG4gICAqL1xuICBnZXQocHJvcGVydHk6c3RyaW5nID0gJycpOmFueSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoc1xuICAgKiBAcGFyYW0gbG9jYXRpb25cbiAgICovXG4gIGxvZ0RlbGV0ZWRfKHBhdGhzOkFycmF5PHN0cmluZz4sIGxvY2F0aW9uOnN0cmluZyA9ICcnKTp2b2lkIHtcbiAgICBpZiAodGhpcy5zaG93RGVsZXRlZCkge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICdcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICoqKioqKioqKioqKipcXG4nICtcbiAgICAgICAgKGxvY2F0aW9uID8gdGhpcy5jYXBpdGFsaXplKGxvY2F0aW9uKSA6ICcnKSArICdEZWxldGVkIGZpbGVzL2ZvbGRlcnM6IFtcXG4nICtcbiAgICAgICAgcGF0aHMuam9pbignLFxcbicpICtcbiAgICAgICAgJ1xcbl1cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwYXRoIGNvbXByaXNlZCBvZiB0aGUgYmFzZSBwYXRoIHRvIHRoZSBCb3dlciBkaXJlY3RvcnkgYW5kIHRoZSBwYXNzZWQgaW4gc3VwcGxlbWVudGFsIHBhdGguXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXI9JycgLSBUaGUgc3VwcGxlbWVudGFsIHBhdGhcbiAgICogQHBhcmFtIHN1cHBsZW1lbnRhbFBhdGhcbiAgICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgZ2VuZXJhdGVkIHBhdGhcbiAgICogQGV4YW1wbGUgY29uc3QgY29uZmlnID0gbmV3IEdDb25maWcoKTtcbiAgICogY29uc3QganF1ZXJ5UGF0aCA9IGNvbmZpZy5nZXRCb3dlckRpcignanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbi5qcycpO1xuICAgKiBqcXVlcnlQYXRoID09PSAnLi9ib3dlcl9mb2xkZXIvanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbi5qcyc7XG4gICAqL1xuICBwYXRoKGRpcjpzdHJpbmcgPSAnLicsIHN1cHBsZW1lbnRhbFBhdGg6c3RyaW5nID0gJycpOnN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXNbZGlyXSArIHN1cHBsZW1lbnRhbFBhdGg7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgU0FTUyBzdHlsZSBiYXNlZCBvbiBlbnZpcm9ubWVudCAoe0BsaW5rIGVudn0pLiBJZiBcInByb2R1Y3Rpb25cIiBvciBcInBwZVwiIHN0eWxlIGlzIGNvbXByZXNzZWQsIGFsbFxuICAgKiBvdGhlciBjYXNlcyBzdHlsZSBpcyBleHBhbmRlZC5cbiAgICogQHJldHVybnMge3N0cmluZ30gJ2NvbXByZXNzZWQnIHx8ICdleHBhbmRlZCdcbiAgICogQGV4YW1wbGUgY29uc3QgY29uZmlnID0gbmV3IEdDb25maWcoKTtcbiAgICogY29uc3Qgc2Fzc1N0eWxlID0gY29uZmlnLnNhc3NTdHlsZSgpO1xuICAgKiBzYXNzU3R5bGUgPT09ICdleHBhbmRlZCdcbiAgICovXG4gIHNhc3NTdHlsZSgpOnN0cmluZyB7XG4gICAgcmV0dXJuICggdGhpcy5lbnYgPT09ICdwcm9kdWN0aW9uJyB8fCB0aGlzLmVudiA9PT0gJ3BwZScgPyAnY29tcHJlc3NlZCcgOiAnZXhwYW5kZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGFzcyBzZXR0ZXIsIHJldHVybnMgaW5zdGFuY2UgdG8gYWxsb3cgY2hhaW5pbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIHByb2VwcnR5IHRvIHNldFxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgcHJvcGVydHlcbiAgICogQHJldHVybnMge0dDb25maWd9IC0gUmV0dXJucyB0aGUgb2JqZWN0IGluc3RhbmNlXG4gICAqIEBleGFtcGxlIGNvbnN0IGNvbmZpZyA9IG5ldyBHQ29uZmlnKCk7XG4gICAqIGNvbnN0IHZhbHVlID0gY29uZmlnLnNldCgnc29tZVByb3BlcnR5JywgdHJ1ZSkuZ2V0KCdzb21lUHJvcGVydHknKTtcbiAgICogdmFsdWUgPT09IHRydWU7XG4gICAqL1xuICBzZXQocHJvcGVydHk6c3RyaW5nLCB2YWx1ZTphbnkpOkdDb25maWcge1xuICAgIHRoaXNbcHJvcGVydHldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
