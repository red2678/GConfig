{"version":3,"sources":["GConfig.es6"],"names":[],"mappings":";AACA;;;AAAY,CAAC;;;;;;;;;;;;;;;;;;;;AAMb,SAAS,EAAE,GAAG;;;AAGZ,MAAI,YAAmB,YAAA,EACrB,aAAoB,YAAA,EACpB,WAAkB,YAAA,EAClB,YAAmB,YAAA,EACnB,WAAmB,aAAA,EACnB,WAAkB,YAAA,EAClB,WAAkB,YAAA,EAClB,UAAiB,YAAA,EACjB,aAAoB,YAAA,EACpB,YAAoB,aAAA,EACpB,aAAoB,YAAA,EACpB,UAAiB,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA4BpB,SAAO;;;;;;;;;;;;;;;;;;;;;AA8BL,+BAAmC;UAAvB,MAAa,qEAAG,EAAE;;;;AAE5B,kBAAY,GAAG,MAAM,CAAC,WAAW,IAAI,kBAAkB,CAAC;AACxD,mBAAa,GAAG,MAAM,CAAC,YAAY,IAAI,QAAQ,CAAC;AAChD,iBAAW,GAAG,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC;AAC1C,kBAAY,GAAG,MAAM,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;AAC1D,iBAAW,GAAG,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC;AACxC,iBAAW,GAAG,MAAM,CAAC,UAAU,IAAI,cAAc,CAAC;AAClD,iBAAW,GAAG,MAAM,CAAC,UAAU,IAAI,GAAG,CAAC;AACvC,gBAAU,GAAG,MAAM,CAAC,SAAS,CAAC;AAC9B,mBAAa,GAAG,MAAM,CAAC,YAAY,IAAI,KAAK,CAAC;AAC7C,mBAAa,GAAG,MAAM,CAAC,YAAY,IAAI;AACnC,YAAI,EAAE,IAAI,CAAC,KAAK,IAAI,AAAC,IAAI,CAAC,WAAW,GAAI,IAAI,CAAC,WAAW,GAAG,eAAM,GAAG,GAAG,EAAE,CAAA,AAAC;AAC3E,kBAAU,EAAE,IAAI,CAAC,UAAU;AAC3B,YAAI,EAAE,KAAK;OACZ,CAAC;AACJ,kBAAY,GAAG,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC;AAC3C,gBAAU,GAAG,MAAM,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;;AAE5D,UAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC;AACnC,UAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC;KAE7C;;;;;;;;;;;;;;AAAA;;;kCAOW,KAAmB,qBAAO;AACpC,YAAI,IAAI,CAAC,WAAW,EAAE;AACpB,iBAAO,CAAC,GAAG,CACT,kDAAkD,IACjD,4BAA4B,GAC7B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GACjB,kDAAkD,CAAA,AAAC,CAAC,CAAC;SACxD;OACF;;;;;;;;;;kCAOgB;AACf,YAAI,IAAI,CAAC,KAAK,EAAE;AACd,iBAAO,CAAC,GAAG,CACT,kDAAkD,GAClD,kBAAkB,GAAG,YAAY,GAAG,KAAK,GACzC,mBAAmB,GAAG,aAAa,GAAG,KAAK,GAC3C,iBAAiB,GAAG,WAAW,GAAG,KAAK,GACvC,iBAAiB,GAAG,WAAW,GAAG,KAAK,GACvC,iBAAiB,GAAG,WAAW,GAAG,KAAK,GACvC,iBAAiB,GAAG,WAAW,GAAG,KAAK,GACvC,mBAAmB,GAAG,aAAa,GAAG,KAAK,GAC3C,kBAAkB,GAAG,YAAY,GAAG,KAAK,GACzC,gBAAgB,GAAG,UAAU,GAAG,KAAK,EACrC,kDAAkD,GAClD,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,GAC/B,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,GAC/B,WAAW,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,GAC9B,UAAU,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,GAC7B,UAAU,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,GAC7B,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GACjC,kDAAkD,GAClD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAC1C,CAAC;SACH;OACF;;;;;;;;;;;;oCAS0C;YAA/B,KAAmB,4EAAG,EAAE;;AAClC,YAAI,CAAC,WAAW,CAAC,cAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;OACnC;;;;;;;;;;;0BAQkB;AACjB,eAAO,IAAI,CAAC,IAAI,GAAG,YAAY,GAAG,eAAM,GAAG,CAAC;OAC7C;;;;wBAGS,KAAY,cAAO;AAC3B,YAAI,KAAK,EAAE;AACT,sBAAY,GAAG,KAAK,CAAC;SACtB;OACF;;;;;;;;;;;0BAQkB;AACjB,eAAO,IAAI,CAAC,IAAI,GAAG,aAAa,GAAG,eAAM,GAAG,IACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,eAAM,GAAG,GAAG,EAAE,CAAA,AAAC,IACrD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,eAAM,GAAG,GAAG,EAAE,CAAA,AAAC,CAAC;OACtD;wBAES,KAAY,cAAO;AAC3B,YAAI,KAAK,EAAE;AACT,uBAAa,GAAG,KAAK,CAAC;SACvB;OACF;;;;;;;;;;;0BAQiB;AAChB,eAAO,IAAI,CAAC,IAAI,GAAG,WAAW,GAAG,eAAM,GAAG,CAAC;OAC5C;wBAEQ,KAAY,cAAO;AAC1B,YAAI,KAAK,EAAE;AACT,qBAAW,GAAG,KAAK,CAAC;SACrB;OACF;;;;;;;;;;;0BAQwB;AACvB,eAAO,YAAY,CAAC;OACrB;wBAEe,KAAY,cAAO;AACjC,YAAI,KAAK,EAAE;AACT,sBAAY,GAAG,KAAK,CAAC;SACtB;OACF;;;;;;;;;;;0BAQwB;AACvB,eAAO,WAAW,CAAC;OACpB;wBAEc,KAAa,eAAO;AACjC,YAAI,KAAK,EAAE;AACT,qBAAW,GAAG,KAAK,CAAC;SACrB;OACF;;;;;;;;;;;0BAQiB;AAChB,eAAO,IAAI,CAAC,IAAI,GAAG,WAAW,GAAG,eAAM,GAAG,CAAC;OAC5C;wBAEQ,KAAY,cAAO;AAC1B,YAAI,KAAK,EAAE;AACT,qBAAW,GAAG,KAAK,CAAC;SACrB;OACF;;;;;;;;;;;0BAQiB;AAChB,eAAO,WAAW,GAAG,eAAM,GAAG,CAAC;OAChC;wBAEQ,KAAY,cAAO;AAC1B,YAAI,KAAK,EAAE;AACT,qBAAW,GAAG,KAAK,CAAC;SACrB;OACF;;;;;;;;;;;;0BASsB;AACrB,eAAS,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,KAAK,GAAG,YAAY,GAAG,UAAU,CAAE;OACrF;wBAEa,KAAY,cAAO;AAC/B,YAAI,KAAK,EAAE;AACT,oBAAU,GAAG,KAAK,CAAC;SACpB;OACF;;;;;;;;;;;;;;;;0BAayB;AACxB,eAAO,aAAa,CAAC;OACtB;wBAEgB,MAAa,cAAO;AACnC,YAAI,MAAM,EAAE;AACV,uBAAa,GAAG,MAAM,CAAC;SACxB;OACF;;;;;;;;;;;0BAQyB;AACxB,eAAO,YAAY,CAAC;OACrB;wBAEe,KAAa,eAAO;AAClC,YAAI,KAAK,EAAE;AACT,sBAAY,GAAG,KAAK,CAAC;SACtB;OACF;;;;;;;;;;;0BAQmB;AAClB,eAAO,IAAI,CAAC,IAAI,GAAG,aAAa,GAAG,eAAM,GAAG,IACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,eAAM,GAAG,GAAG,EAAE,CAAA,AAAC,CAAC;OACtD;wBAEU,KAAY,cAAO;AAC5B,YAAI,KAAK,EAAE;AACT,qBAAW,GAAG,KAAK,CAAC;SACrB;OACF;;;;;;;;;;;0BAQsB;AACrB,eAAO,UAAU,CAAC;OACnB;wBAEa,KAAY,cAAO;AAC/B,YAAI,KAAK,EAAE;AACT,oBAAU,GAAG,KAAK,CAAC;SACpB;OACF;;;;SACF,CAAA;CACF;;AAED,IAAM,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC;;kBAEL,EAAE","file":"GConfig.js","sourcesContent":["/* @flow */\n\"use strict\";\n\n// Node Modules\nimport nPath from \"path\";\nimport del from \"del\";\n\nfunction G$() {\n\n  // Private variables\n  var _bowerFolder:string,\n    _buildsFolder:string,\n    _docsFolder:string,\n    _environment:string,\n    _liveReload:boolean,\n    _nodeFolder:string,\n    _rootFolder:string,\n    _sassStyle:string,\n    _serverConfig:Object,\n    _showDeleted:boolean,\n    _sourceFolder:string,\n    _subFolder:string;\n  /**\n   * @name G$\n   * @author 'Anthony Trimble red2678@gmail.com'\n   * @since '11/14/2015'\n   *\n   * @class G$\n   * @classdesc Creates a new G$.\n   *\n   * @exports G$\n   * @requires  path\n   * @requires  del\n   *\n   * @example\n   * g$.bowerFolder = 'bower_components';\n   * g$.buildsFolder = 'builds';\n   * g$.docsFolder = 'docs';\n   * g$.liveReload = false;\n   * g$.nodeFolder = 'node_modules';\n   * g$.rootFolder = '.';\n   * g$.sourceFolder = 'src';\n   * g$.sourceFiles = {\n   * js: [\n   *  g$.source + '*.js'\n   * ]};\n   * g$.showDeleted = false;\n   * g$.subFolder = 'v1';\n   */\n  return new class {\n\n    debug:boolean;\n\n    /**\n     * Default value :: {}<br>\n     * Container for source paths\n     * @type {object}\n     * @example '{}'\n     */\n    sourceFiles:Object;\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Creates a G$ object\n     * @param {Object} [config={}] - Options to initialize the component with\n     * @param {!string} [config.bowerFolder=\"./bower_components/\"] - See {@link bowerFolder}\n     * @param {!string} [config.buildsFolder=\"./_BUILDS/dev/mainSite/\"] - See {@link buildFolder}\n     * @param {!string} [config.docsFolder=\"./_DOCS/\"] - See {@link docs}\n     * @param {!string} [config.environment=\"dev\"] - See {@link env}\n     * @param {!boolean} [config.liveReload=\"true\"] - See {@link liveReload}\n     * @param {!string} [config.nodeFolder=\"./node_modules/\"] - See {@link nodeModulesFolder}\n     * @param {!string} [config.rootFolder='./'] - See {@link rootFolder}\n     * @param {!object} [config.serverConfig=\"{}\"] - See {@link serverConfig}\n     * @param {!boolean} [config.showDeleted=\"false\"] - See {@link showDeleted}\n     * @param {!string} [config.site=\"mainSite\"] - See {@link site}\n     * @param {!object} [config.sources=\"{}\"] - See {@link sources}\n     * @param {!string} [config.sourceFolder=\"./_SRC/dev/\"] - See {@link sourceFolder}\n     * @param {!string} [config.subFolder=\"./_SRC/v1/\"] - See {@link subFolder}\n     */\n    constructor(config:object = {}):G$ {\n\n      _bowerFolder = config.bowerFolder || 'bower_components';\n      _buildsFolder = config.buildsFolder || 'builds';\n      _docsFolder = config.docsFolder || 'docs';\n      _environment = config.environment || process.env.NODE_ENV;\n      _liveReload = config.liveReload || true;\n      _nodeFolder = config.nodeFolder || 'node_modules';\n      _rootFolder = config.rootFolder || '.';\n      _sassStyle = config.sassStyle;\n      _sourceFolder = config.sourceFolder || 'src';\n      _serverConfig = config.serverConfig || {\n          root: this.build + ((this.environment) ? this.environment + nPath.sep : ''),\n          livereload: this.liveReload,\n          port: 64033\n        };\n      _showDeleted = config.showDeleted || false;\n      _subFolder = config.subFolder || process.env.GCONFIG_SRCSUB;\n\n      this.debug = config.debug || false;\n      this.sourceFiles = config.sourceFiles || {};\n\n    }\n\n    /**\n     *\n     * @private\n     * @param paths\n     */\n    _logDeleted(paths:Array<string>):void {\n      if (this.showDeleted) {\n        console.log(\n          '\\n********************************************\\n' +\n          ('Deleted files/folders: [\\n' +\n          paths.join(',\\n') +\n          '\\n]\\n*******************************************'));\n      }\n    }\n\n    /**\n     *\n     * @public\n     * @returns {void}\n     */\n    buildInfo():void {\n      if (this.debug) {\n        console.log(\n          'Config :: ------------------------------------\\n' +\n          'Bower Folder :: ' + _bowerFolder + ' \\n' +\n          'Builds Folder :: ' + _buildsFolder + ' \\n' +\n          'Docs Folder :: ' + _docsFolder + ' \\n' +\n          'Live Reload :: ' + _liveReload + ' \\n' +\n          'Node Folder :: ' + _nodeFolder + ' \\n' +\n          'Root Folder :: ' + _rootFolder + ' \\n' +\n          'Source Folder :: ' + _sourceFolder + ' \\n' +\n          'Show Deleted :: ' + _showDeleted + ' \\n' +\n          'Sub Folder :: ' + _subFolder + ' \\n',\n          'Paths :: -------------------------------------\\n' +\n          'Bower :: ' + this.bower + '\\n' +\n          'Build :: ' + this.build + '\\n' +\n          'Docs  :: ' + this.docs + '\\n' +\n          'Node :: ' + this.node + '\\n' +\n          'Root :: ' + this.root + '\\n' +\n          'Source :: ' + this.source + '\\n' +\n          'Source Files :: ------------------------------\\n' +\n          JSON.stringify(this.sourceFiles, null, 4)\n        );\n      }\n    }\n\n    /**\n     * Wraps node del.sync in {@link _logDeleted}\n     * @param {Array<string>} files=[] - The files to be deleted, accepts GLOB patterns.\n     * @returns {void}\n     * @example const config = new GConfig();\n     * config.deleteFiles(['folder/file.html', 'folder/file.css', 'folder/folder-two/*.js']) //synchronous action\n     */\n    deleteFiles(files:Array<string> = []):void {\n      this._logDeleted(del.sync(files));\n    }\n\n    /**\n     * Default value :: './bower_components/'<br>\n     * The project bower directory\n     * @type {string}\n     * @example './bower_components/'\n     */\n    get bower():string {\n      return this.root + _bowerFolder + nPath.sep;\n    }\n\n   // noinspection JSMethodCanBeStatic\n    set bower(value:string):void {\n      if (value) {\n        _bowerFolder = value;\n      }\n    }\n\n    /**\n     * Default value :: './builds/dev/mainSite/'<br>\n     * The project builds directory\n     * @type {string}\n     * @example './builds/dev/mainSite/'\n     */\n    get build():string {\n      return this.root + _buildsFolder + nPath.sep +\n        (this.environment ? this.environment + nPath.sep : '') +\n        (this.subFolder ? this.subFolder + nPath.sep : '');\n    }\n\n    set build(value:string):void {\n      if (value) {\n        _buildsFolder = value;\n      }\n    }\n\n    /**\n     * Default value :: './docs/'<br>\n     * The project docs directory\n     * @type {string}\n     * @example './_DOCS/'\n     */\n    get docs():string {\n      return this.root + _docsFolder + nPath.sep;\n    }\n\n    set docs(value:string):void {\n      if (value) {\n        _docsFolder = value;\n      }\n    }\n\n    /**\n     * Default value :: 'dev'<br>\n     * The project environment from the NODE_ENV environmental variable.\n     * @type {string}\n     * @example 'dev'\n     */\n    get environment():string {\n      return _environment;\n    }\n\n    set environment(value:string):void {\n      if (value) {\n        _environment = value;\n      }\n    }\n\n    /**\n     * Default value :: true<br>\n     * Whether or not to use gulp live reload\n     * @type {boolean}\n     * @example true\n     */\n    get liveReload():Boolean {\n      return _liveReload;\n    }\n\n    set liveReload(value:Boolean):void {\n      if (value) {\n        _liveReload = value;\n      }\n    }\n\n    /**\n     * Default value :: './node_modules/'<br>\n     * The project node modules directory\n     * @type {string}\n     * @example './node_modules/'\n     */\n    get node():string {\n      return this.root + _nodeFolder + nPath.sep;\n    }\n\n    set node(value:string):void {\n      if (value) {\n        _nodeFolder = value;\n      }\n    }\n\n    /**\n     * Default value :: './'<br>\n     * The project root directory\n     * @type {object}\n     * @example './'\n     */\n    get root():string {\n      return _rootFolder + nPath.sep;\n    }\n\n    set root(value:string):void {\n      if (value) {\n        _rootFolder = value;\n      }\n    }\n\n    /**\n     * Get current SASS style based on environment ({@link env}). If \"production\" or \"ppe\" style is compressed, all\n     * other cases style is expanded.\n     * @returns {string} 'compressed' || 'expanded'\n     * @example const config = new GConfig();\n     * config.sassStyle === 'expanded'\n     */\n    get sassStyle():string {\n      return ( _sassStyle === 'prod' || _sassStyle === 'ppe' ? 'compressed' : 'expanded');\n    }\n\n    set sassStyle(style:string):void {\n      if (style) {\n        _sassStyle = style;\n      }\n    }\n\n    /**\n     * Default value :: see example. If overriding all fields are required.<br>\n     * Container for gulp-connect server options\n     * @type {object}\n     * @example\n     * {\n       *    root :'./builds/v1/dev/',\n       *    livereload : true,\n       *    port : 64033\n       * }\n     */\n    get serverConfig():Object {\n      return _serverConfig;\n    }\n\n    set serverConfig(config:Object):void {\n      if (config) {\n        _serverConfig = config;\n      }\n    }\n\n    /**\n     * Default value :: false<br>\n     * Whether or not to show deleted gulp files in the console\n     * @type {boolean}\n     * @example false\n     */\n    get showDeleted():boolean {\n      return _showDeleted;\n    }\n\n    set showDeleted(value:boolean):void {\n      if (value) {\n        _showDeleted = value;\n      }\n    }\n\n    /**\n     * Default value :: './_SRC/'<br>\n     *  The project source directory test\n     * @type {string}\n     * @example './_SRC/'\n     */\n    get source():string {\n      return this.root + _sourceFolder + nPath.sep +\n        (this.subFolder ? this.subFolder + nPath.sep : '');\n    }\n\n    set source(value:string):void {\n      if (value) {\n        _rootFolder = value;\n      }\n    }\n\n    /**\n     * Default value :: '<none>'<br>\n     * The project site from env.GCONFIG_SRCSUB\n     * @type {string}\n     * @example 'v1'\n     */\n    get subFolder():string {\n      return _subFolder;\n    }\n\n    set subFolder(value:string):void {\n      if (value) {\n        _subFolder = value;\n      }\n    }\n  }\n}\n\nconst g$ = new G$();\n\nexport default g$;\n"]}