{"version":3,"sources":["GConfig.es6"],"names":[],"mappings":"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","file":"GConfig.js","sourcesContent":["/* @flow */\n\"use strict\";\n\n// Node Modules\nimport nPath from \"path\";\nimport del from \"del\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * @name GConfig\n * @author 'Anthony Trimble red2678@gmail.com'\n * @since '11/14/2015'\n *\n * @class GConfig\n * @classdesc Creates a new GConfig.\n *\n * @exports GConfig\n * @requires  module:npath\n * @requires  module:del\n *\n * @example const mainConfig = new GConfig({\n *     showDeleted : false,\n *     liveReload : true\n *   });\n */\nexport default class GConfig {\n\n  env:string;\n  site:string;\n\n  root:string;\n  srcDir:string;\n  buildDir:string;\n  latestDir:string;\n  bowerDir:string;\n  nodeModulesFolder:string;\n  docsDir:string;\n\n  showDeleted:boolean;\n  liveReload:boolean;\n  produceArtifacts:boolean;\n\n  sources:object;\n  serverOptionsConfig:object;\n\n  /**\n   * Creates a GConfig object\n   * @param {Object} [config={}] - Options to initialize the component with\n   * @param {!string} [config.bowerFolder=\"./bower_components/\"] - See {@link bowerDir}\n   * @param {!string} [config.buildDir=\"./_BUILDS/dev/mainSite/\"] - See {@link buildDir}\n   * @param {!string} [config.docs=\"./_DOCS/\"] - See {@link docs}\n   * @param {!string} [config.env=\"dev\"] - See {@link env}\n   * @param {!string} [config.latestDir=\"./_LATEST/\"] - See {@link latestDir}\n   * @param {!boolean} [config.liveReload=\"true\"] - See {@link liveReload}\n   * @param {!string} [config.nodeModulesFolder=\"./node_modules/\"] - See {@link nodeModulesFolder}\n   * @param {!boolean} [config.produceArtifacts=\"false\"] - See {@link produceArtifacts}\n   * @param {!string} [config.rootDir='./'] - See {@link rootDir}\n   * @param {!object} [config.serverOptionsConfig=\"{}\"] - See {@link serverOptionsConfig}\n   * @param {!boolean} [config.showDeleted=\"false\"] - See {@link showDeleted}\n   * @param {!string} [config.site=\"mainSite\"] - See {@link site}\n   * @param {!object} [config.sources=\"{}\"] - See {@link sources}\n   * @param {!string} [config.srcDir=\"./_SRC/dev/\"] - See {@link srcDir}\n   */\n  constructor(config:object = {}):GConfig {\n\n    /**\n     * Default value :: './'<br>\n     * The project root directory\n     * @type {object}\n     * @example './'\n     */\n    this.root = (config.root || '.') + nPath.sep;\n\n    /**\n     * Default value :: 'dev'<br>\n     * The project environment from the NODE_ENV environmental variable.\n     * @type {string}\n     * @example 'dev'\n     */\n    this.env = (config.env || process.env.NODE_ENV) ? (config.env || (process.env.NODE_ENV || 'dev')).toLowerCase() : '';\n\n    /**\n     * Default value :: 'mainSite'<br>\n     * The project site from env.TAGGLISH_SITE\n     * @type {string}\n     * @example 'mainSite'\n     */\n    this.srcSubFolder = (config.srcSubFolder || process.env.GCONFIG_SRCSUB) ? config.srcSubFolder || (process.env.GCONFIG_SRCSUB).toLowerCase() + nPath.sep : '';\n\n    /**\n     * Default value :: './builds/dev/mainSite/'<br>\n     * The project builds directory\n     * @type {string}\n     * @example './builds/dev/mainSite/'\n     */\n    this.builds = this.root  + (config.builds || 'builds') + nPath.sep +\n      ((this.env) ? this.env + nPath.sep : '') + this.srcSubFolder;\n\n    /**\n     * Default value :: './_SRC/'<br>\n     *  The project source directory\n     * @type {string}\n     * @example './_SRC/'\n     */\n    this.src = this.root + (config.src || 'src') + nPath.sep + this.srcSubFolder;\n\n    /**\n     * Default value :: './docs/'<br>\n     * The project docs directory\n     * @type {string}\n     * @example './_DOCS/'\n     */\n    this.docs = this.root + (config.docs || 'docs') + nPath.sep;\n\n    /**\n     * Default value :: './bower_components/'<br>\n     * The project bower directory\n     * @type {string}\n     * @example './bower_components/'\n     */\n    this.bower = this.root + (config.bower || 'bower_components') + nPath.sep;\n\n    /**\n     * Default value :: './node_modules/'<br>\n     * The project node modules directory\n     * @type {string}\n     * @example './node_modules/'\n     */\n    this.nodeModules = this.root + (config.nodeModules || 'node_modules') + nPath.sep;\n\n    /**\n     * Default value :: true<br>\n     * Whether or not to use gulp live reload\n     * @type {boolean}\n     * @example true\n     */\n    this.liveReload = config.liveReload || true;\n\n    /**\n     * Default value :: false<br>\n     * Whether or not to use produce build artifacts\n     * @type {boolean}\n     * @example false\n     */\n    this.produceArtifacts = config.produceArtifacts || false;\n\n    /**\n     * Default value :: see example. If overriding all fields are required.<br>\n     * Container for gulp-connect server options\n     * @type {object}\n     * @example\n     * {\n\t\t *    root :'./builds/v1/dev/',\n\t\t *    livereload : true,\n\t\t *    port : 64033\n\t\t * }\n     */\n    this.serverOptions = config.serverOptions || {\n        root: this.builds + this.srcSubFolder + ((this.env) ? this.env + nPath.sep : ''),\n        livereload: this.liveReload,\n        port: 64033\n      };\n\n    /**\n     * Default value :: false<br>\n     * Whether or not to show deleted gulp files in the console\n     * @type {boolean}\n     * @example false\n     */\n    this.showDeleted = config.showDeleted || false;\n\n    /**\n     * Default value :: {}<br>\n     * Container for source paths\n     * @type {object}\n     * @example '{}'\n     */\n    this.sources = config.sources || {};\n  }\n\n  /**\n   * Capitalizes the first letter of a passed in string\n   * @param {string} str='' - The string to capitalize\n   * @returns {string} - The string to with the first letter capitalized\n   * @example const str = capitalize('my test string');\n   * str === 'My test string';\n   */\n  capitalize(str:string = ''):string {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  }\n\n  /**\n   * Wraps node del.sync in {@link logDeleted}\n   * @param {Array<string>} files=[] - The files to be delted, accepts GLOB patterns.\n   * @returns {void}\n   * @example const config = new GConfig();\n   * config.deleteFiles(['folder/file.html', 'folder/file.css', 'folder/folder-two/*.js']) //synchronous action\n   */\n  deleteFiles(files:Array<string> = []):void {\n    this.logDeleted_(del.sync(files));\n  }\n\n  /**\n   * Basic getter\n   * @param {string} property - the property to get\n   * @returns {*} - found property or undefined\n   * @example const config = new GConfig();\n   * const style = config.get('someProperty');\n   */\n  get(property:string = ''):any {\n    return this[property];\n  }\n\n  /**\n   *\n   * @param paths\n   * @param location\n   */\n  logDeleted_(paths:Array<string>, location:string = ''):void {\n    if (this.showDeleted) {\n      console.log(\n        '\\n******************************* *************\\n' +\n        (location ? this.capitalize(location) : '') + 'Deleted files/folders: [\\n' +\n        paths.join(',\\n') +\n        '\\n]\\n*******************************************');\n    }\n  }\n\n  /**\n   * Returns a path comprised of the base path to the Bower directory and the passed in supplemental path.\n   * @param {string} dir='' - The supplemental path\n   * @param supplementalPath\n   * @returns {string} - The generated path\n   * @example const config = new GConfig();\n   * const jqueryPath = config.getBowerDir('jquery/dist/jquery.min.js');\n   * jqueryPath === './bower_folder/jquery/dist/jquery.min.js';\n   */\n  path(dir:string = '.', supplementalPath:string = ''):string {\n    return this[dir] + supplementalPath;\n  }\n\n  /**\n   * Get current SASS style based on environment ({@link env}). If \"production\" or \"ppe\" style is compressed, all\n   * other cases style is expanded.\n   * @returns {string} 'compressed' || 'expanded'\n   * @example const config = new GConfig();\n   * const sassStyle = config.sassStyle();\n   * sassStyle === 'expanded'\n   */\n  sassStyle():string {\n    return ( this.env === 'production' || this.env === 'ppe' ? 'compressed' : 'expanded');\n  }\n\n  /**\n   * Class setter, returns instance to allow chaining\n   * @param {string} property - The proeprty to set\n   * @param {*} value - The value to assign to the property\n   * @returns {GConfig} - Returns the object instance\n   * @example const config = new GConfig();\n   * const value = config.set('someProperty', true).get('someProperty');\n   * value === true;\n   */\n  set(property:string, value:any):GConfig {\n    this[property] = value;\n    return this;\n  }\n}\n"]}